{"version":3,"sources":["mapStyles.js","App.js","reportWebVitals.js","index.js"],"names":["mapStyles","libraries","mapContainerStyle","width","height","center","lat","lng","options","styles","disableDefaultUI","zoomControl","Locate","panTo","className","onClick","navigator","geolocation","getCurrentPosition","position","console","log","coords","latitude","longitude","src","alt","Search","usePlacesAutoComplete","requestOptions","location","radius","ready","value","suggestions","status","data","setValue","clearSuggestions","onSelect","address","a","getGeocode","results","getLatLng","onChange","e","target","disabled","placeholder","map","id","description","App","useLoadScript","googleMapsApiKey","process","isLoaded","loadError","useState","markers","setMarkers","selected","setSelected","onMapClick","React","useCallback","event","current","latLng","time","Date","mapRef","useRef","onMapLoad","setZoom","zoom","onLoad","marker","icon","url","scaledSize","window","google","maps","Size","origin","Point","anchor","toISOString","onCloseClick","formatRelative","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.713a9a42.chunk.js","sourcesContent":["const mapStyles =  [\r\n    {\r\n        \"featureType\": \"all\",\r\n        \"elementType\": \"geometry.fill\",\r\n        \"stylers\": [\r\n            {\r\n                \"weight\": \"2.00\"\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        \"featureType\": \"all\",\r\n        \"elementType\": \"geometry.stroke\",\r\n        \"stylers\": [\r\n            {\r\n                \"color\": \"#9c9c9c\"\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        \"featureType\": \"all\",\r\n        \"elementType\": \"labels.text\",\r\n        \"stylers\": [\r\n            {\r\n                \"visibility\": \"on\"\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        \"featureType\": \"landscape\",\r\n        \"elementType\": \"all\",\r\n        \"stylers\": [\r\n            {\r\n                \"color\": \"#f2f2f2\"\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        \"featureType\": \"landscape\",\r\n        \"elementType\": \"geometry.fill\",\r\n        \"stylers\": [\r\n            {\r\n                \"color\": \"#ffffff\"\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        \"featureType\": \"landscape.man_made\",\r\n        \"elementType\": \"geometry.fill\",\r\n        \"stylers\": [\r\n            {\r\n                \"color\": \"#ffffff\"\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        \"featureType\": \"poi\",\r\n        \"elementType\": \"all\",\r\n        \"stylers\": [\r\n            {\r\n                \"visibility\": \"off\"\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        \"featureType\": \"road\",\r\n        \"elementType\": \"all\",\r\n        \"stylers\": [\r\n            {\r\n                \"saturation\": -100\r\n            },\r\n            {\r\n                \"lightness\": 45\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        \"featureType\": \"road\",\r\n        \"elementType\": \"geometry.fill\",\r\n        \"stylers\": [\r\n            {\r\n                \"color\": \"#eeeeee\"\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        \"featureType\": \"road\",\r\n        \"elementType\": \"labels.text.fill\",\r\n        \"stylers\": [\r\n            {\r\n                \"color\": \"#7b7b7b\"\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        \"featureType\": \"road\",\r\n        \"elementType\": \"labels.text.stroke\",\r\n        \"stylers\": [\r\n            {\r\n                \"color\": \"#ffffff\"\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        \"featureType\": \"road.highway\",\r\n        \"elementType\": \"all\",\r\n        \"stylers\": [\r\n            {\r\n                \"visibility\": \"simplified\"\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        \"featureType\": \"road.arterial\",\r\n        \"elementType\": \"labels.icon\",\r\n        \"stylers\": [\r\n            {\r\n                \"visibility\": \"off\"\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        \"featureType\": \"transit\",\r\n        \"elementType\": \"all\",\r\n        \"stylers\": [\r\n            {\r\n                \"visibility\": \"off\"\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        \"featureType\": \"water\",\r\n        \"elementType\": \"all\",\r\n        \"stylers\": [\r\n            {\r\n                \"color\": \"#46bcec\"\r\n            },\r\n            {\r\n                \"visibility\": \"on\"\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        \"featureType\": \"water\",\r\n        \"elementType\": \"geometry.fill\",\r\n        \"stylers\": [\r\n            {\r\n                \"color\": \"#c8d7d4\"\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        \"featureType\": \"water\",\r\n        \"elementType\": \"labels.text.fill\",\r\n        \"stylers\": [\r\n            {\r\n                \"color\": \"#070707\"\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        \"featureType\": \"water\",\r\n        \"elementType\": \"labels.text.stroke\",\r\n        \"stylers\": [\r\n            {\r\n                \"color\": \"#ffffff\"\r\n            }\r\n        ]\r\n    }\r\n]\r\nexport default mapStyles;","import React, { useState } from \"react\";\nimport {\n  GoogleMap,\n  useLoadScript,\n  Marker,\n  InfoWindow,\n} from \"@react-google-maps/api\";\nimport { formatRelative } from \"date-fns\";\nimport \"./App.css\";\nimport mapStyles from \"./mapStyles\";\n\nimport usePlacesAutoComplete, {\n  getGeocode,\n  getLatLng,\n} from \"use-places-autocomplete\";\nimport {\n  Combobox,\n  ComboboxInput,\n  ComboboxPopover,\n  ComboboxList,\n  ComboboxOption,\n} from \"@reach/combobox\";\nimport \"@reach/combobox/styles.css\";\n\nconst libraries = [\"places\"];\nconst mapContainerStyle = {\n  width: \"100vw\",\n  height: \"100vh\",\n};\nconst center = {\n  lat: 43.653225,\n  lng: -79.383186,\n};\n// snazzymaps.com\nconst options = {\n  styles: mapStyles,\n  disableDefaultUI: true,\n  zoomControl: true,\n};\n\nfunction App() {\n  const { isLoaded, loadError } = useLoadScript({\n    googleMapsApiKey: process.env.REACT_APP_GOOGLE_MAPS_KEY,\n    libraries,\n  });\n  const [markers, setMarkers] = useState([]);\n  const [selected, setSelected] = useState(null);\n\n  const onMapClick = React.useCallback((event) => {\n    setMarkers((current) => [\n      ...current,\n      {\n        lat: event.latLng.lat(),\n        lng: event.latLng.lng(),\n        time: new Date(),\n      },\n    ]);\n  }, []);\n\n  const mapRef = React.useRef();\n  const onMapLoad = React.useCallback((map) => {\n    mapRef.current = map;\n  }, []);\n\n  const panTo = React.useCallback(({ lat, lng }) => {\n    console.log(mapRef.current);\n    mapRef.current.panTo({ lat, lng });\n    mapRef.current.setZoom(14);\n  }, []);\n\n  if (loadError) return \"Error loading maps\";\n  if (!isLoaded) return \"Loading maps\";\n  console.log(markers);\n  return (\n    <div>\n      <h1>Bears</h1>\n      <Search panTo={panTo} />\n      <Locate panTo={panTo} />\n      <GoogleMap\n        mapContainerStyle={mapContainerStyle}\n        zoom={8}\n        center={center}\n        options={options}\n        onClick={onMapClick}\n        onLoad={onMapLoad}\n      >\n        {markers.map((marker) => {\n          return (\n            <Marker\n              key={marker.time.toISOString()}\n              position={{ lat: marker.lat, lng: marker.lng }}\n              icon={{\n                url: \"./bear-svgrepo-com.svg\",\n                scaledSize: new window.google.maps.Size(30, 30),\n                origin: new window.google.maps.Point(0, 0),\n                anchor: new window.google.maps.Point(15, 15),\n              }}\n              onClick={() => {\n                setSelected(marker);\n              }}\n            />\n          );\n        })}\n        {selected ? (\n          <InfoWindow\n            position={{ lat: selected.lat, lng: selected.lng }}\n            onCloseClick={() => {\n              setSelected(null);\n            }}\n          >\n            <div>\n              <h2>Bear Spotted</h2>\n              <p>Spotted {formatRelative(selected.time, new Date())}</p>\n            </div>\n          </InfoWindow>\n        ) : null}\n      </GoogleMap>\n    </div>\n  );\n}\nfunction Locate({ panTo }) {\n  return (\n    <button\n      className=\"locate\"\n      onClick={() => {\n        navigator.geolocation.getCurrentPosition(\n          (position) => {\n            console.log(position);\n            panTo({\n              lat: position.coords.latitude,\n              lng: position.coords.longitude,\n            });\n          },\n          () => null\n        );\n      }}\n    >\n      <img src=\"navigation-compass-svgrepo-com.svg\" alt=\"compass locate me\" />\n    </button>\n  );\n}\nfunction Search({ panTo }) {\n  const {\n    ready,\n    value,\n    suggestions: { status, data },\n    setValue,\n    clearSuggestions,\n  } = usePlacesAutoComplete({\n    requestOptions: {\n      location: {\n        lat: () => 43.653225,\n        lng: () => -79.383186,\n      },\n      radius: 200 * 1000,\n    },\n  });\n\n  return (\n    <div className=\"search\">\n      <Combobox\n        onSelect={async (address) => {\n          setValue(address, false);\n          clearSuggestions();\n          try {\n            const results = await getGeocode({ address });\n            const { lat, lng } = await getLatLng(results[0]);\n\n            panTo({ lat, lng });\n          } catch (error) {\n            console.log(error);\n          }\n        }}\n      >\n        <ComboboxInput\n          value={value}\n          onChange={(e) => {\n            setValue(e.target.value);\n          }}\n          disabled={!ready}\n          placeholder={\"enter an address\"}\n        />\n        <ComboboxPopover>\n          <ComboboxList>\n            {status === \"OK\" &&\n              data.map(({  description }, id) => {\n                // data.map((el) => {\n                // console.log('key = ', el);\n                return (\n                \n                <ComboboxOption key={id} value={description}></ComboboxOption>\n              )})}\n          </ComboboxList>\n        </ComboboxPopover>\n      </Combobox>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}